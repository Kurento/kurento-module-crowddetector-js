/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var ChecktypeError = kurentoClient.checkType.ChecktypeError;

var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;


function noop(error) {
  if (error) console.trace(error);
};


/**
 * Create a {@link module:crowddetector.CrowdDetectorFilter CrowdDetectorFilter}
 *
 * @classdesc
 *  Filter that detects people agglomeration in video streams
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:crowddetector.CrowdDetectorFilter
 *
 * @fires {@link module:crowddetector#event:CrowdDetectorDirection CrowdDetectorDirection}
 * @fires {@link module:crowddetector#event:CrowdDetectorFluidity CrowdDetectorFluidity}
 * @fires {@link module:crowddetector#event:CrowdDetectorOccupancy CrowdDetectorOccupancy}
 */
function CrowdDetectorFilter(){
  CrowdDetectorFilter.super_.call(this);
};
inherits(CrowdDetectorFilter, Filter);


//
// Public properties
//

/**
 * The processing image will be resized to this width (in pixels)
 *
 * @alias module:crowddetector.CrowdDetectorFilter#getProcessingWidth
 *
 * @param {module:crowddetector.CrowdDetectorFilter~getProcessingWidthCallback} [callback]
 *
 * @return {external:Promise}
 */
CrowdDetectorFilter.prototype.getProcessingWidth = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return this._invoke(transaction, 'getProcessingWidth', callback);
};
/**
 * @callback module:crowddetector.CrowdDetectorFilter~getProcessingWidthCallback
 * @param {external:Error} error
 * @param {external:Integer} result
 */

/**
 * The processing image will be resized to this width (in pixels)
 *
 * @alias module:crowddetector.CrowdDetectorFilter#setProcessingWidth
 *
 * @param {external:Integer} processingWidth
 * @param {module:crowddetector.CrowdDetectorFilter~setProcessingWidthCallback} [callback]
 *
 * @return {external:Promise}
 */
CrowdDetectorFilter.prototype.setProcessingWidth = function(processingWidth, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('int', 'processingWidth', processingWidth, {required: true}
);

  var params = {
    processingWidth: processingWidth,
  };

  return this._invoke(transaction, 'setProcessingWidth', params, callback);
};
/**
 * @callback module:crowddetector.CrowdDetectorFilter~setProcessingWidthCallback
 * @param {external:Error} error
 */


/**
 * @alias module:crowddetector.CrowdDetectorFilter.constructorParams
 *
 * @property   {module:core.MediaPipeline} mediaPipeline

 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter 
 *  belongs
 *
 * @property   {module:crowddetector/complexTypes.RegionOfInterest}[] rois

 *  Regions of interest for the filter
 */
CrowdDetectorFilter.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },
  rois: {
    type: 'RegionOfInterest',
    isArray: true,
    required: true
  },
};

/**
 * @alias module:crowddetector.CrowdDetectorFilter.events
 *
 * @extends module:core/abstracts.Filter.events
 */
CrowdDetectorFilter.events = Filter.events.concat(['CrowdDetectorDirection', 'CrowdDetectorFluidity', 'CrowdDetectorOccupancy']);


/**
 * Checker for {@link crowddetector.CrowdDetectorFilter}
 *
 * @memberof module:crowddetector
 *
 * @param {external:String} key
 * @param {module:crowddetector.CrowdDetectorFilter} value
 */
function checkCrowdDetectorFilter(key, value)
{
  if(!(value instanceof CrowdDetectorFilter))
    throw ChecktypeError(key, CrowdDetectorFilter, value);
};


module.exports = CrowdDetectorFilter;

CrowdDetectorFilter.check = checkCrowdDetectorFilter;
