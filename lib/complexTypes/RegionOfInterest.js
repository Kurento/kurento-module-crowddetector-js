/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var ComplexType = kurentoClient.register.complexTypes.ComplexType;


/**
 * Region of interest for some events in a video processing filter
 *
 * @constructor module:crowddetector/complexTypes.RegionOfInterest
 *
 * @property {module:crowddetector/complexTypes.RelativePoint} points
 *  list of points delimiting the region of interest
 * @property {module:crowddetector/complexTypes.RegionOfInterestConfig} regionOfInterestConfig
 *  data structure for configuration of CrowdDetector regions of interest
 * @property {external:String} id
 *  identifier of the region of interest. The string used for the id must begin 
 *   with a letter followed by an alphanumeric character included (/-_.:+)
 */
function RegionOfInterest(regionOfInterestDict){
  if(!(this instanceof RegionOfInterest))
    return new RegionOfInterest(regionOfInterestDict)

  regionOfInterestDict = regionOfInterestDict || {}

  // Check regionOfInterestDict has the required fields
  checkType('RelativePoint', 'regionOfInterestDict.points', regionOfInterestDict.points, {isArray: true, required: true});
  checkType('RegionOfInterestConfig', 'regionOfInterestDict.regionOfInterestConfig', regionOfInterestDict.regionOfInterestConfig, {required: true});
  checkType('String', 'regionOfInterestDict.id', regionOfInterestDict.id, {required: true});

  // Init parent class
  RegionOfInterest.super_.call(this, regionOfInterestDict)

  // Set object properties
  Object.defineProperties(this, {
    points: {
      writable: true,
      enumerable: true,
      value: regionOfInterestDict.points
    },
    regionOfInterestConfig: {
      writable: true,
      enumerable: true,
      value: regionOfInterestDict.regionOfInterestConfig
    },
    id: {
      writable: true,
      enumerable: true,
      value: regionOfInterestDict.id
    }
  })
}
inherits(RegionOfInterest, ComplexType)

// Private identifiers to allow re-construction of the complexType on the server
// They need to be enumerable so JSON.stringify() can access to them
Object.defineProperties(RegionOfInterest.prototype, {
  __module__: {
    enumerable: true,
    value: "crowddetector"
  },
  __type__: {
    enumerable: true,
    value: "RegionOfInterest"
  }
})

/**
 * Checker for {@link module:crowddetector/complexTypes.RegionOfInterest}
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:crowddetector/complexTypes.RegionOfInterest} value
 */
function checkRegionOfInterest(key, value)
{
  if(!(value instanceof RegionOfInterest))
    throw ChecktypeError(key, RegionOfInterest, value);
};


module.exports = RegionOfInterest;

RegionOfInterest.check = checkRegionOfInterest;
