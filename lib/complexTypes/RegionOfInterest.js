/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var ComplexType = kurentoClient.register.complexTypes.ComplexType;


/**
 * Region of interest for some events in a video processing filter
 *
 * @constructor module:crowddetector/complexTypes.RegionOfInterest
 *
 * @property {module:crowddetector/complexTypes.RelativePoint} points
 *  list of points delimiting the region of interest
 * @property {module:crowddetector/complexTypes.RegionOfInterestConfig} regionOfInterestConfig
 *  data structure for configuration of CrowdDetector regions of interest
 * @property {external:String} id
 *  identifier of the region of interest. The string used for the id must begin 
 *   with a letter followed by an alphanumeric character included (/-_.:+)
 */
function RegionOfInterest(regionOfInterestDict){
  if(!(this instanceof RegionOfInterest))
    return new RegionOfInterest(regionOfInterestDict)

  // Check regionOfInterestDict has the required fields
  checkType('RelativePoint', 'regionOfInterestDict.points', regionOfInterestDict.points, true);
  checkType('RegionOfInterestConfig', 'regionOfInterestDict.regionOfInterestConfig', regionOfInterestDict.regionOfInterestConfig, true);
  checkType('String', 'regionOfInterestDict.id', regionOfInterestDict.id, true);

  // Init parent class
  RegionOfInterest.super_.call(this, regionOfInterestDict)

  // Set object properties
  Object.defineProperties(this, {
    points: {
      writable: true,
      enumerable: true,
      value: regionOfInterestDict.points
    },
    regionOfInterestConfig: {
      writable: true,
      enumerable: true,
      value: regionOfInterestDict.regionOfInterestConfig
    },
    id: {
      writable: true,
      enumerable: true,
      value: regionOfInterestDict.id
    }
  })
}
inherits(RegionOfInterest, ComplexType)

// Private identifiers to allow re-construction of the complexType on the server
// They need to be enumerable so JSON.stringify() can access to them
Object.defineProperties(RegionOfInterest.prototype, {
  __module__: {
    enumerable: true,
    value: "crowddetector"
  },
  __type__: {
    enumerable: true,
    value: "RegionOfInterest"
  }
})

/**
 * Checker for {@link crowddetector/complexTypes.RegionOfInterest}
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:crowddetector/complexTypes.RegionOfInterest} value
 */
function checkRegionOfInterest(key, value)
{
  if(!(value instanceof RegionOfInterest))
    throw ChecktypeError(key, RegionOfInterest, value);
};


module.exports = RegionOfInterest;

RegionOfInterest.check = checkRegionOfInterest;
