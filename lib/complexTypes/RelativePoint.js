/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (https://kurento.openvidu.io/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var ComplexType = kurentoClient.register.complexTypes.ComplexType;


/**
 * Relative points in a physical screen, values are a percentage relative to the
 *
 * @constructor module:crowddetector/complexTypes.RelativePoint
 *
 * @property {external:Number} x
 *  Percentage relative to the image width to calculate the X coordinate of the 
 *  point [0..1]
 * @property {external:Number} y
 *  Percentage relative to the image height to calculate the Y coordinate of the
 */
function RelativePoint(relativePointDict){
  if(!(this instanceof RelativePoint))
    return new RelativePoint(relativePointDict)

  relativePointDict = relativePointDict || {}

  // Check relativePointDict has the required fields
  // 
  // checkType('float', 'relativePointDict.x', relativePointDict.x, {required: true});
  //  
  // checkType('float', 'relativePointDict.y', relativePointDict.y, {required: true});
  //  

  // Init parent class
  RelativePoint.super_.call(this, relativePointDict)

  // Set object properties
  Object.defineProperties(this, {
    x: {
      writable: true,
      enumerable: true,
      value: relativePointDict.x
    },
    y: {
      writable: true,
      enumerable: true,
      value: relativePointDict.y
    }
  })
}
inherits(RelativePoint, ComplexType)

// Private identifiers to allow re-construction of the complexType on the server
// They need to be enumerable so JSON.stringify() can access to them
Object.defineProperties(RelativePoint.prototype, {
  __module__: {
    enumerable: true,
    value: "crowddetector"
  },
  __type__: {
    enumerable: true,
    value: "RelativePoint"
  }
})

/**
 * Checker for {@link module:crowddetector/complexTypes.RelativePoint}
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:crowddetector/complexTypes.RelativePoint} value
 */
function checkRelativePoint(key, value)
{
  if(!(value instanceof RelativePoint))
    throw ChecktypeError(key, RelativePoint, value);
};


module.exports = RelativePoint;

RelativePoint.check = checkRelativePoint;
