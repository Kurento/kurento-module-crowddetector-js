/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var checkType = require('checktype');

/**
 * Checker for {@link crowddetector/complexTypes.RegionOfInterestConfig}
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:crowddetector/complexTypes.RegionOfInterestConfig} value
 */
function checkRegionOfInterestConfig(key, value)
{
  checkType('int', key+'.occupancyLevelMin', value.occupancyLevelMin);
  checkType('int', key+'.occupancyLevelMed', value.occupancyLevelMed);
  checkType('int', key+'.occupancyLevelMax', value.occupancyLevelMax);
  checkType('int', key+'.occupancyNumFramesToEvent', value.occupancyNumFramesToEvent);
  checkType('int', key+'.fluidityLevelMin', value.fluidityLevelMin);
  checkType('int', key+'.fluidityLevelMed', value.fluidityLevelMed);
  checkType('int', key+'.fluidityLevelMax', value.fluidityLevelMax);
  checkType('int', key+'.fluidityNumFramesToEvent', value.fluidityNumFramesToEvent);
  checkType('boolean', key+'.sendOpticalFlowEvent', value.sendOpticalFlowEvent);
  checkType('int', key+'.opticalFlowNumFramesToEvent', value.opticalFlowNumFramesToEvent);
  checkType('int', key+'.opticalFlowNumFramesToReset', value.opticalFlowNumFramesToReset);
  checkType('int', key+'.opticalFlowAngleOffset', value.opticalFlowAngleOffset);
};


/**
 * data structure for configuration of CrowdDetector regions of interest
 *
 * @memberof module:crowddetector/complexTypes
 *
 * @typedef crowddetector/complexTypes.RegionOfInterestConfig
 *
 * @type {Object}
 * @property {external:Integer} occupancyLevelMin
 *  minimun occupancy percentage in the ROI to send occupancy events
 * @property {external:Integer} occupancyLevelMed
 *  send occupancy level = 1 if the occupancy percentage is between occupancy_level_min and this level
 * @property {external:Integer} occupancyLevelMax
 *  send occupancy level = 2 if the occupancy percentage is between occupancy_level_med and this level,
 *  and send occupancy level = 3 if the occupancy percentage is between this level and 100
 * @property {external:Integer} occupancyNumFramesToEvent
 *  number of consecutive frames that a new occupancy level has to be detected to recognize it as a occupancy level change.
 *  A new occupancy event will be send
 * @property {external:Integer} fluidityLevelMin
 *  minimun fluidity percentage in the ROI to send fluidity events
 * @property {external:Integer} fluidityLevelMed
 *  send fluidity level = 1 if the fluidity percentage is between fluidity_level_min and this level
 * @property {external:Integer} fluidityLevelMax
 *  send fluidity level = 2 if the fluidity percentage is between fluidity_level_med and this level,
 *   and send fluidity level = 3 if the fluidity percentage is between this level and 100
 * @property {external:Integer} fluidityNumFramesToEvent
 *  number of consecutive frames that a new fluidity level has to be detected to recognize it as a fluidity level change.
 *   A new fluidity event will be send
 * @property {external:Boolean} sendOpticalFlowEvent
 *  Enable/disable the movement direction detection into the ROI
 * @property {external:Integer} opticalFlowNumFramesToEvent
 *  number of consecutive frames that a new direction of movement has to be detected to recognize a new movement direction. 
 *   A new direction event will be send
 * @property {external:Integer} opticalFlowNumFramesToReset
 *  number of consecutive frames in order to reset the counter of repeated directions
 * @property {external:Integer} opticalFlowAngleOffset
 *  Direction of the movement. The angle could have four different values: 
 *   left (0), up (90), right (180) and down (270). This cartesian axis could be rotated adding an angle offset
 */


module.exports = checkRegionOfInterestConfig;
